# SQL Server Setup Script for CSP Integration Testing
# Configures SQL Server for TDE and Always Encrypted testing

param(
    [string]$InstanceName = "MSSQLSERVER",
    [string]$DatabaseName = "SupacryptTestDB",
    [string]$ServerName = "localhost"
)

$ErrorActionPreference = "Stop"

Write-Host "Configuring SQL Server for CSP integration testing..." -ForegroundColor Yellow

# Import SQL Server module if available
try {
    Import-Module SqlServer -ErrorAction SilentlyContinue
} catch {
    Write-Warning "SqlServer PowerShell module not available. Some tests may be limited."
}

# Check if SQL Server is running
$sqlService = Get-Service -Name "MSSQL`$$InstanceName" -ErrorAction SilentlyContinue
if (-not $sqlService -or $sqlService.Status -ne "Running") {
    throw "SQL Server instance '$InstanceName' is not running"
}

Write-Host "SQL Server instance '$InstanceName' is running" -ForegroundColor Green

# Create test database
Write-Host "Creating test database..." -ForegroundColor Cyan

$createDbScript = @"
IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = '$DatabaseName')
BEGIN
    CREATE DATABASE [$DatabaseName]
    PRINT 'Database $DatabaseName created successfully'
END
ELSE
BEGIN
    PRINT 'Database $DatabaseName already exists'
END
"@

try {
    Invoke-Sqlcmd -ServerInstance $ServerName -Query $createDbScript -TrustServerCertificate
    Write-Host "Test database '$DatabaseName' ready" -ForegroundColor Green
} catch {
    Write-Warning "Failed to create database using Invoke-Sqlcmd: $_"
    Write-Host "Database creation will be tested during integration tests" -ForegroundColor Yellow
}

# Configure TDE master key
Write-Host "Setting up TDE configuration..." -ForegroundColor Cyan

$tdeSetupScript = @"
USE master;

-- Create master key if not exists
IF NOT EXISTS (SELECT * FROM sys.symmetric_keys WHERE symmetric_key_id = 101)
BEGIN
    CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'SupacryptTest@2025!'
    PRINT 'Master key created'
END

-- Create certificate for TDE using CSP
IF NOT EXISTS (SELECT * FROM sys.certificates WHERE name = 'SupacryptTDECert')
BEGIN
    CREATE CERTIFICATE SupacryptTDECert
    WITH SUBJECT = 'Supacrypt TDE Certificate'
    PRINT 'TDE certificate created'
END

-- Create database encryption key
USE [$DatabaseName];

IF NOT EXISTS (SELECT * FROM sys.dm_database_encryption_keys WHERE database_id = DB_ID('$DatabaseName'))
BEGIN
    CREATE DATABASE ENCRYPTION KEY
    WITH ALGORITHM = AES_256
    ENCRYPTION BY SERVER CERTIFICATE SupacryptTDECert
    
    -- Enable TDE
    ALTER DATABASE [$DatabaseName] SET ENCRYPTION ON
    PRINT 'TDE enabled for database $DatabaseName'
END
"@

# Create Always Encrypted test table structure
$alwaysEncryptedScript = @"
USE [$DatabaseName];

-- Create column master key using CSP
IF NOT EXISTS (SELECT * FROM sys.column_master_keys WHERE name = 'SupacryptCMK')
BEGIN
    CREATE COLUMN MASTER KEY SupacryptCMK
    WITH (
        KEY_STORE_PROVIDER_NAME = 'MSSQL_CSP_PROVIDER',
        KEY_PATH = 'Supacrypt CSP'
    )
    PRINT 'Column master key created'
END

-- Create column encryption key
IF NOT EXISTS (SELECT * FROM sys.column_encryption_keys WHERE name = 'SupacryptCEK')
BEGIN
    CREATE COLUMN ENCRYPTION KEY SupacryptCEK
    WITH VALUES (
        COLUMN_MASTER_KEY = SupacryptCMK,
        ALGORITHM = 'RSA_OAEP',
        ENCRYPTED_VALUE = 0x01000000  -- Placeholder, will be generated by CSP
    )
    PRINT 'Column encryption key created'
END

-- Create test table with encrypted columns
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'EncryptedTestData')
BEGIN
    CREATE TABLE EncryptedTestData (
        ID int IDENTITY(1,1) PRIMARY KEY,
        PlainTextData nvarchar(100),
        EncryptedData nvarchar(100) ENCRYPTED WITH (
            COLUMN_ENCRYPTION_KEY = SupacryptCEK,
            ENCRYPTION_TYPE = DETERMINISTIC,
            ALGORITHM = 'AEAD_AES_256_CBC_HMAC_SHA_256'
        ),
        RandomEncryptedData nvarchar(100) ENCRYPTED WITH (
            COLUMN_ENCRYPTION_KEY = SupacryptCEK,
            ENCRYPTION_TYPE = RANDOMIZED,
            ALGORITHM = 'AEAD_AES_256_CBC_HMAC_SHA_256'
        ),
        CreatedDate datetime2 DEFAULT GETDATE()
    )
    PRINT 'Encrypted test table created'
END
"@

# Create test stored procedures
$storedProcScript = @"
USE [$DatabaseName];

-- Procedure to test TDE operations
IF EXISTS (SELECT * FROM sys.procedures WHERE name = 'TestTDEOperations')
    DROP PROCEDURE TestTDEOperations;

CREATE PROCEDURE TestTDEOperations
AS
BEGIN
    SET NOCOUNT ON;
    
    -- Check TDE status
    SELECT 
        db_name(database_id) as DatabaseName,
        encryption_state,
        encryption_state_desc,
        percent_complete
    FROM sys.dm_database_encryption_keys
    WHERE database_id = DB_ID();
    
    -- Perform some I/O operations to test TDE
    CREATE TABLE #TempTDETest (
        ID int IDENTITY(1,1),
        TestData nvarchar(1000),
        CreatedDate datetime2 DEFAULT GETDATE()
    );
    
    INSERT INTO #TempTDETest (TestData)
    VALUES ('TDE Test Data 1'), ('TDE Test Data 2'), ('TDE Test Data 3');
    
    SELECT COUNT(*) as RecordCount FROM #TempTDETest;
    
    DROP TABLE #TempTDETest;
    
    PRINT 'TDE operations test completed'
END
"@

# Create backup test procedures
$backupTestScript = @"
USE [$DatabaseName];

-- Procedure to test encrypted backups
IF EXISTS (SELECT * FROM sys.procedures WHERE name = 'TestEncryptedBackup')
    DROP PROCEDURE TestEncryptedBackup;

CREATE PROCEDURE TestEncryptedBackup
    @BackupPath nvarchar(500) = 'C:\Temp\SupacryptTestBackup.bak'
AS
BEGIN
    SET NOCOUNT ON;
    
    -- Perform encrypted backup
    BACKUP DATABASE [$DatabaseName]
    TO DISK = @BackupPath
    WITH ENCRYPTION (
        ALGORITHM = AES_256,
        SERVER_CERTIFICATE = SupacryptTDECert
    ), COMPRESSION, INIT;
    
    PRINT 'Encrypted backup completed to: ' + @BackupPath;
    
    -- Verify backup
    RESTORE VERIFYONLY FROM DISK = @BackupPath;
    PRINT 'Backup verification completed';
END
"@

# Save scripts to files for later execution
$scriptsPath = "../../test_data/sql_scripts"
if (-not (Test-Path $scriptsPath)) {
    New-Item -ItemType Directory -Path $scriptsPath -Force | Out-Null
}

Set-Content -Path "$scriptsPath\tde_setup.sql" -Value $tdeSetupScript
Set-Content -Path "$scriptsPath\always_encrypted_setup.sql" -Value $alwaysEncryptedScript
Set-Content -Path "$scriptsPath\stored_procedures.sql" -Value $storedProcScript
Set-Content -Path "$scriptsPath\backup_test.sql" -Value $backupTestScript

Write-Host "SQL Server configuration scripts created:" -ForegroundColor Green
Write-Host "  - TDE Setup: $scriptsPath\tde_setup.sql" -ForegroundColor Cyan
Write-Host "  - Always Encrypted: $scriptsPath\always_encrypted_setup.sql" -ForegroundColor Cyan
Write-Host "  - Stored Procedures: $scriptsPath\stored_procedures.sql" -ForegroundColor Cyan
Write-Host "  - Backup Tests: $scriptsPath\backup_test.sql" -ForegroundColor Cyan

Write-Host "`nSQL Server setup preparation complete!" -ForegroundColor Green
Write-Host "Run the integration test scenarios to execute these configurations." -ForegroundColor Yellow